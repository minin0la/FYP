#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Sep 22, 2017 11:40:11 AM


import sys
import weather
import os
from dataIO import fileIO
import time
import datetime
import asyncio
import manage_item
import delete_item
import manage_settings
import traveltime
import webbrowser
import subprocess
import PIL.Image
import PIL.ImageTk
import json

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def milk_remove_button(p1):
    w.Scrolledlistbox1.delete(0, END)
    result = ""
    i = 1
    to_remove = []
    lists = fileIO("data/list.json", "load")
    for the_list in lists:
        if the_list['Name'] == 'Milk':
            to_remove.append(the_list)
    for the_list in to_remove:
        lists = fileIO("data/list.json", "load")
        lists.remove(the_list)  
    fileIO("data/list.json", "save", lists)
    lists = fileIO("data/list.json", "load")
    for the_list in lists:
        result = "{}. Name: {}".format(i, the_list['Name'])
        w.Scrolledlistbox1.insert(END, result + "\n")
        result = "Expiring on {}, {} {} {}".format(the_list['Day'], the_list['Date'], the_list['Month'], the_list['Year'])
        w.Scrolledlistbox1.insert(END, result + "\n")
        i = i + 1

def weather_button(p1):
    w.information_box.configure(text=weather.get_weather(location))

def set_text(text):
    w.information_box.configure(text=text)

def togglesmallscreen():
    global top_level
    top_level.wm_state("iconic")

def togglebigscreen():
    global top_level
    top_level.wm_state("normal")

def refresh():
    w.Scrolledlistbox1.delete(0, END)
    result = ""
    i = 1
    c = -1
    lists = fileIO("data/list.json", "load")
    for the_list in lists:
        result = "{}. {}".format(i, the_list['Name'])
        w.Scrolledlistbox1.insert(END, result + "\n")
        c = c + 1
        # result = "Expiring on {}".format(datetime.date(int(the_list['Year']), int(the_list['Month']), int(the_list['Date'])).strftime("%A, %d %B %Y"))
        # w.Scrolledlistbox1.insert(END, result + "\n")
        # c = c + 1
        dayleft = int(the_list['Date']) - datetime.date.today().day
        if datetime.date.today() == datetime.date(int(the_list['Year']), int(the_list['Month']), int(the_list['Date'])):
            result = "Expired ({})".format(datetime.date(int(the_list['Year']), int(the_list['Month']), int(the_list['Date'])).strftime("%A, %d %B %Y"))
            w.Scrolledlistbox1.insert(END, result + "\n")
            c = c + 1
            w.Scrolledlistbox1.itemconfig(c - 1, {'bg':'red'})
            w.Scrolledlistbox1.itemconfig(c, {'bg':'red'})
        elif (dayleft < 4) and (int(the_list['Month']) == datetime.date.today().month) and (int(the_list['Year']) == datetime.date.today().year):
            result = "Expiring on {}".format(datetime.date(int(the_list['Year']), int(the_list['Month']), int(the_list['Date'])).strftime("%A, %d %B %Y"))
            w.Scrolledlistbox1.insert(END, result + "\n")
            c = c + 1
            w.Scrolledlistbox1.itemconfig(c - 1, {'bg':'orange'})
            w.Scrolledlistbox1.itemconfig(c, {'bg':'orange'})
        else:
            result = "Expiring on {}".format(datetime.date(int(the_list['Year']), int(the_list['Month']), int(the_list['Date'])).strftime("%A, %d %B %Y"))
            w.Scrolledlistbox1.insert(END, result + "\n")
            c = c + 1
        i = i + 1
    root.after(1000, refresh)

def refresh_weather():
    settings = fileIO("data/settings.json", "load")
    for i in settings:
        home = i['Home']
        country = i['Country']
        location1 = i['Location 1']
        location2 = i['Location 2']
    icon_path = "Images/weather_icon/" + str(weather.get_weather_icon(country)) + ".gif"
    img = PIL.Image.open(icon_path)
    img = img.resize((150, 150), PIL.Image.ANTIALIAS)
    w._img1 = PIL.ImageTk.PhotoImage(img)
    w.weather_icon.configure(image=w._img1)
    try:
        w.weather_location.configure(text=json.loads(weather.get_observation(country).to_JSON())["Location"]["name"])
    except:
        w.weather_location.configure(text=weather.get_observation(country))
    try:
        wind_speed = weather.get_weather(country).get_wind()                  # {'speed': 4.6, 'deg': 330}
        humidity = weather.get_weather(country).get_humidity()
        status = weather.get_weather(country).get_detailed_status() 
        message = "{}\nHumidity: {}%\nWind Speed: {}m/s".format(status, humidity, wind_speed["speed"])
    except:
        message = "Error"
    w.weather_others.configure(text=message)
    root.after(3600000, refresh_weather)

def main():
    refresh()
    refresh_weather()
    try:
        value, location = traveltime.get_travel_time()
    except:
        value = "Error"
        location = "Error"
    w.traffic_label.configure(text=value)
    w.traffic_label_location.configure(text=location)
    # w.traffic_label_location.delete(0, END)
    # w.traffic_label_location.insert(END, location + "\n")
    w.traffic_length = location
    w.traffic_status_length = value
    # w.location_font_size()
    # w.traffic_font_size()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    check_folders()
    check_files()
    main()

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

def manage():
    manage_item.create_FridgeBud(root)

def remove_item():
    delete_item.create_FridgeBud(root)

def settings():
    manage_settings.create_FridgeBud(root)

def chrome():
    # webbrowser.open("https://www.sp.edu.sg/wps/portal/vp-spws/")
    togglesmallscreen()
    toggleKeyboard()
    browser = subprocess.Popen(['chromium-browser', 'http://sp.edu.sg'])
    browser.wait()
    toggleKeyboard()
    togglebigscreen()


def toggleKeyboard():
    p = subprocess.Popen(['florence show'], shell=True, stdout= subprocess.PIPE, stderr= subprocess.PIPE, universal_newlines=True)
    if not "" == p.stderr.readline():
        subprocess.Popen(['florence'], shell=True) 

def get_traffic():
    value = traveltime.get_travel_time()
    w.traffic_label.configure(text=value)

def show_traffic_location_1(p1):
    value, location = traveltime.get_travel_time()
    # w.traffic_label_location.delete(0, END)
    # w.traffic_label_location.insert(END, location + "\n")
    w.traffic_length = location
    w.traffic_status_length = value
    w.location_font_size()
    w.traffic_font_size()
    w.traffic_label.configure(text=value)
    w.traffic_label_location.configure(text=location)

def show_traffic_location_2(p1):
    value, location = traveltime.get_travel_time2()
    # w.traffic_label_location.delete(0, END)
    # w.traffic_label_location.insert(END, location + "\n")
    w.traffic_length = location
    w.traffic_status_length = value
    w.location_font_size()
    w.traffic_font_size()
    w.traffic_label.configure(text=value)
    w.traffic_label_location.configure(text=location)

def send_to_telegram():
    import requests
    result = ""
    i = 1
    lists = fileIO("data/list.json", "load")
    for the_list in lists:
        result = result + "{}. {}".format(i, the_list['Name']) + "<br>"  
        dayleft = int(the_list['Date']) - datetime.date.today().day
        if datetime.date.today() == datetime.date(int(the_list['Year']), int(the_list['Month']), int(the_list['Date'])):
            result = result + "Expired ({})<br>".format(datetime.date(int(the_list['Year']), int(the_list['Month']), int(the_list['Date'])).strftime("%A, %d %B %Y"))
        else:
            result = result + "Expiring on {}<br>".format(datetime.date(int(the_list['Year']), int(the_list['Month']), int(the_list['Date'])).strftime("%A, %d %B %Y"))
        i = i + 1
    print(result)
    result = "Message from FridgeBud<br>Item in the fridge<br>" + result
    content = {"value1": result}
    requests.post("https://maker.ifttt.com/trigger/FridgeBud_Item/with/key/d9O5pfQ2QslLb8AHONzshC", json=content)

def check_folders():
    if not os.path.exists("data/"):
        print("Creating data/ folder...")
        os.makedirs("data/")


def check_files():
    f = "data/list.json"
    if not fileIO(f, "check"):
        print("Creating empty list.json...")
        fileIO(f, "save", [])
    f = "data/settings.json"
    if not fileIO(f, "check"):
        print("Creating empty settings.json...")
        fileIO(f, "save", [{"Country": "Singapore", "Home": "648324 Singapore", "Location 1": "648324 Singapore", "Location 2": "139651 Singapore"}])

if __name__ == '__main__':
    import GUI
    GUI.vp_start_gui()