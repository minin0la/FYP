#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Oct 02, 2017 05:28:58 PM


import sys
import datetime
from dataIO import fileIO

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def set_Tk_var():
    global number_box_text
    number_box_text = StringVar()

def Num1(p1):
    value = number_box_text.get()
    value = value + "1"
    w.item_number_box.delete(0, 'end')
    w.item_number_box.insert(END, value)
def Num2(p1):
    value = number_box_text.get()
    value = value + "2"
    w.item_number_box.delete(0, 'end')
    w.item_number_box.insert(END, value)
def Num3(p1):
    value = number_box_text.get()
    value = value + "3"
    w.item_number_box.delete(0, 'end')
    w.item_number_box.insert(END, value)
def Num4(p1):
    value = number_box_text.get()
    value = value + "4"
    w.item_number_box.delete(0, 'end')
    w.item_number_box.insert(END, value)
def Num5(p1):
    value = number_box_text.get()
    value = value + "5"
    w.item_number_box.delete(0, 'end')
    w.item_number_box.insert(END, value)
def Num6(p1):
    value = number_box_text.get()
    value = value + "6"
    w.item_number_box.delete(0, 'end')
    w.item_number_box.insert(END, value)
def Num7(p1):
    value = number_box_text.get()
    value = value + "7"
    w.item_number_box.delete(0, 'end')
    w.item_number_box.insert(END, value)
def Num8(p1):
    value = number_box_text.get()
    value = value + "8"
    w.item_number_box.delete(0, 'end')
    w.item_number_box.insert(END, value)
def Num9(p1):
    value = number_box_text.get()
    value = value + "9"
    w.item_number_box.delete(0, 'end')
    w.item_number_box.insert(END, value)
def Num0(p1):
    value = number_box_text.get()
    value = value + "0"
    w.item_number_box.delete(0, 'end')
    w.item_number_box.insert(END, value)
def clear_button(p1):
    w.item_number_box.delete(0, 'end')
def enter_button(p1):
    value = number_box_text.get()
    w.item_number_box.delete(0, 'end')
    lists = fileIO("data/list.json", "load")
    i = 1
    to_remove = []
    for the_list in lists:
        if i == int(value):
            to_remove.append(the_list)
        i = i + 1
    for the_list in to_remove:
        lists.remove(the_list)
    if to_remove:
        fileIO("data/list.json", "save", lists)

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    main()

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

def refresh():
    w.item_list.delete(0, END)
    result = ""
    i = 1
    c = -1
    lists = fileIO("data/list.json", "load")
    for the_list in lists:
        result = "{}. {}".format(i, the_list['Name'])
        w.item_list.insert(END, result + "\n")
        c = c + 1
        # result = "Expiring on {}".format(datetime.date(int(the_list['Year']), int(the_list['Month']), int(the_list['Date'])).strftime("%A, %d %B %Y"))
        # w.item_list.insert(END, result + "\n")
        # c = c + 1
        dayleft = int(the_list['Date']) - datetime.date.today().day
        if datetime.date.today() == datetime.date(int(the_list['Year']), int(the_list['Month']), int(the_list['Date'])):
            result = "Expired ({})".format(datetime.date(int(the_list['Year']), int(the_list['Month']), int(the_list['Date'])).strftime("%A, %d %B %Y"))
            w.item_list.insert(END, result + "\n")
            c = c + 1
            w.item_list.itemconfig(c - 1, {'bg':'red'})
            w.item_list.itemconfig(c, {'bg':'red'})
        elif (dayleft < 4) and (int(the_list['Month']) == datetime.date.today().month) and (int(the_list['Year']) == datetime.date.today().year):
            result = "Expiring on {}".format(datetime.date(int(the_list['Year']), int(the_list['Month']), int(the_list['Date'])).strftime("%A, %d %B %Y"))
            w.item_list.insert(END, result + "\n")
            c = c + 1
            w.item_list.itemconfig(c - 1, {'bg':'orange'})
            w.item_list.itemconfig(c, {'bg':'orange'})
        else:
            result = "Expiring on {}".format(datetime.date(int(the_list['Year']), int(the_list['Month']), int(the_list['Date'])).strftime("%A, %d %B %Y"))
            w.item_list.insert(END, result + "\n")
            c = c + 1
        i = i + 1
    root.after(1000, refresh)

def item_status():
    soon = 0
    expired = 0
    total = 0
    lists = fileIO("data/list.json", "load")
    for the_list in lists:
        dayleft = int(the_list['Date']) - datetime.date.today().day
        if datetime.date.today() == datetime.date(int(the_list['Year']), int(the_list['Month']), int(the_list['Date'])):
            expired = expired + 1
        elif (dayleft < 4) and (int(the_list['Month']) == datetime.date.today().month) and (int(the_list['Year']) == datetime.date.today().year):
            soon = soon + 1
        else:
            pass
        total = total + 1
    result = "There are total of {} items.\n\n{} items are expiring soon\n\n{} items already expired".format(total, soon, expired)
    w.item_status_box.config(text=result)
    root.after(1000, item_status)

def main():
    refresh()
    item_status()

if __name__ == '__main__':
    import delete_item
    delete_item.vp_start_gui()

